name: Play Snake Game in GitHub Actions
on: [workflow_dispatch]

jobs:
  play-snake:
    runs-on: ubuntu-latest
    steps:
    - name: Play Snake
      run: |
        echo "Starting Snake Game in GitHub Actions Terminal..."
        echo "Use workflow dispatch to play!"

        # Snake game implementation in bash
        # Adapted from https://github.com/alexdantas/nSnake

        #!/bin/bash
        clean() {
            tput rmcup
            tput cnorm
            stty echo
            exit 0
        }
        trap clean HUP TERM
        trap 'break 2' INT

        tput smcup
        tput civis
        stty -echo

        directions=(up right down left)
        moves=([up]=-1 [right]=1 [down]=1 [left]=-1)
        x=() y=()
        apple_x= apple_y=
        score=0
        level=9
        delay=0.1
        key=direction=right
        w=$(tput cols) h=$(tput lines)

        for ((i=0; i<3; i++)); do
            x+=( $((w/2)) )
            y+=( $((h/2+i)) )
        done

        place_apple() {
            apple_x=$((RANDOM%(w-2)+1))
            apple_y=$((RANDOM%(h-2)+1))
            for ((i=0; i<${#x[@]}; i++)); do
                ((apple_x==x[i] && apple_y==y[i])) && place_apple
            done
        }
        place_apple

        draw() {
            clear
            echo -e "\033[1;32mScore: $score\033[0m"
            echo -ne "\033[${apple_y};${apple_x}H\033[1;31m@\033[0m"
            for ((i=0; i<${#x[@]}; i++)); do
                echo -ne "\033[${y[i]};${x[i]}H\033[1;32mO\033[0m"
            done
        }

        while :; do
            read -t $delay -n 1 key || key=
            case $key in
                w|W|A|a) new_direction=up;;
                d|D|C|c) new_direction=right;;
                s|S|B|b) new_direction=down;;
                a|A|D|d) new_direction=left;;
                q|Q) clean;;
            esac

            [[ ${moves[$direction]} == ${moves[$new_direction]} ]] || direction=$new_direction

            case $direction in
                up)    ((y[0]--));;
                right) ((x[0]++));;
                down)  ((y[0]++));;
                left)  ((x[0]--));;
            esac

            for ((i=${#x[@]}-1; i>0; i--)); do
                x[i]=${x[i-1]}
                y[i]=${y[i-1]}
            done

            ((x[0]<1 || x[0]>=w || y[0]<1 || y[0]>=h)) && break

            for ((i=1; i<${#x[@]}; i++)); do
                ((x[0]==x[i] && y[0]==y[i])) && break 2
            done

            if ((x[0]==apple_x && y[0]==apple_y)); then
                x+=(${x[-1]}) y+=(${y[-1]})
                place_apple
                ((score++))
                ((score%5==0)) && ((delay*=9/10))
            fi

            draw
        done

        echo -e "\033[${h};1H\033[1;31mGame Over! Score: $score\033[0m"
        sleep 2
